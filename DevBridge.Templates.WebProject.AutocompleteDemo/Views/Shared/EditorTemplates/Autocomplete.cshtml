@using DevBridge.Templates.WebProject.AutocompleteDemo.Controllers
@using DevBridge.Templates.WebProject.AutocompleteDemo.Infrastructure.Attributes
@using DevBridge.Templates.WebProject.AutocompleteDemo.Infrastructure.Extenssions
@using DevBridge.Templates.WebProject.AutocompleteDemo.Infrastructure.Tools
@model DevBridge.Templates.WebProject.AutocompleteDemo.Models.Shared.Autocomplete

@{
	var isDataSourceLocal = false;
	var localDataSourceStringJson = MvcHtmlString.Create("{}");
	object attribute;

	var attributeType = typeof(AutocompleteAttribute);
	if (!ViewData.ModelMetadata.AdditionalValues.TryGetValue(attributeType.Name, out attribute))
	{
		object localDataSource;
		if (!ViewData.TryGetValue("dataSource", out localDataSource))
		{
			throw new InvalidOperationException(String.Format(
				"Autocomplete property \"{0}\" does not have data source set. Add Autocomplete attribute and specify DataSourceType.",
				ViewData.ModelMetadata.PropertyName));
		}

		if (localDataSource != null)
		{
			localDataSourceStringJson = MvcHtmlString.Create(localDataSource.ToString());
		}

		isDataSourceLocal = true;
	}

	var attr = (AutocompleteAttribute)attribute;
	if (attr != null && attr.SetDataSourceAfterLoadViaOptions)
	{
		isDataSourceLocal = true;
	}
}

<script type="text/javascript">
	jQuery(function ($) {
		$('#@Html.IdFor(m => m.Name)').autocomplete({
			serviceUrl: '@(!isDataSourceLocal ? Url.JsAction<AutocompleteController>(c => c.Index(null, null)) : null)',
			isJsonRequest: true,
			minChars: @(attr != null ? attr.MinChars : 2),
			delimiter: /(,|;)\s*/, // regex or character
			maxHeight: 400,
			width: 300,
			zIndex: 9999,
			deferRequestBy: 0, //miliseconds
			params: @{
				var t = !isDataSourceLocal && attr != null && attr.DataSourceType != null ? string.Format("{{ dataSourceType: '{0}' }}", attr.DataSourceType.FullName) : "{}";
						@MvcHtmlString.Create(t)
					},
			noCache: false, 
			onSelect: function (value, data) {
				$('#@Html.IdFor(m => m)').val(data);
			},
			onChange: function(value, data) {
				if (data == -1) {
						// remove invalid value, as it didn't match anything
						$('#@Html.IdFor(m => m)').val('');
						return false;
				}
			},
			isLocal: @isDataSourceLocal.ToString().ToLower(),
			lookup: @{if (localDataSourceStringJson.ToString() != "{}")
			 {
							@:JSON.parse('@localDataSourceStringJson')
						}
			 else
			 {
							@:null
						}
					}
		});
	});
</script>
@Html.HiddenFor(m => m)
@Html.TextBoxFor(m => m.Name, HtmlAttributeHelper.GetAutocompleteAttributes(ViewData))